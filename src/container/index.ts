//NPM Imports
import { app, BrowserWindow, ipcMain } from 'electron';
import path from 'path';
import portscanner from 'portscanner';
import isDev from 'electron-is-dev';

//Internal Imports
import {startExpress} from '../server/server' 

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: any;
const gotTheLock = app.requestSingleInstanceLock
let installExtension: (arg0: any) => Promise<any>, REACT_DEVELOPER_TOOLS: any;
let expressPort:string, appVersion:string  
// Before Launch Decide If Dev Tools will be required
if (isDev) {
  // eslint-disable-next-line @typescript-eslint/no-var-requires
  const devTools = require('electron-devtools-installer');
  installExtension = devTools.default;
  REACT_DEVELOPER_TOOLS = devTools.REACT_DEVELOPER_TOOLS;
}
// If App Instance Already Running Quit new Instance
  if (!gotTheLock) {
    app.quit();
  }
// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}
app.whenReady().then(async () => {
  // Creats Window and Loads Render Files
  console.log("Creating New Winow")
  const win = new BrowserWindow({
    width: 600,
    height: 600,
    // fullscreen: true,
    autoHideMenuBar: true,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false
    }
  })
  // Get Avalible Port 
  process.env.expressPort = await getAvaliblePort()
  //Set Version and Express Port Ready for Use in Render
  console.log("Setting Port Variables")
  // const mainProcessVars: {expressPort: string;appVersion: string;} = {
  expressPort = process.env.expressPort,
  appVersion = app.getVersion()
  // }    
 // Set Up event Listner - This will be called in render to get port number for back end and version number to display on screen
  console.log("Setting Up Variable Listner")
  ipcMain.on('variable-request', function (event) {
    event.sender.send('variable-reply', [ expressPort, appVersion]);
  });
  // Set No MenuBar
  win.setMenuBarVisibility(true)
  // Start Back End
  startExpress();
  // Load URL for Render based on dev or production
  win.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  // Open the DevTools.
  // console.log("Open Dev tools")
  if (isDev) {
    win.webContents.openDevTools({ mode: "detach" });
  }
  // If DevMode Install development Tools
  // console.log("Install extensions")
  if (isDev) {
    installExtension(REACT_DEVELOPER_TOOLS)
      .then(name => console.log(`Added Extension:  ${name}`))
      .catch(error => console.log(`An error occurred: , ${error}`));
  } 
  // If not Dev Mode - Set Up Auto-Updates
  // if (!isDev) {
  //   // Variables For Auto Updater
  //   const server = 'http://my-cabinetvision-pa.herokuapp.com'
  //   const url = `${server}/update/${process.platform}/${app.getVersion()}`
  //   autoUpdater.setFeedURL({ url })
  //   // Set Timed Interval to Check Updates
  //   setInterval(() => {
  //     autoUpdater.checkForUpdates()
  //   }, 300000)
  //   // Sets Message Variable For Dialog Info
  //   autoUpdater.on('update-downloaded', (event, releaseNotes, releaseName) => {
  //     let message = process.platform === 'win32' ? releaseNotes : releaseName
  //     win.webContents.send('updateAvalible', message)
  //   });
  // }
})
// Once Window is Closed Quit the app
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})
// app.on('activate', () => {
//   if (BrowserWindow.getAllWindows().length === 0) {
//     // eslint-disable-next-line no-undef
//     createWindow()
//   }
// })

// Set Up functions
const getAvaliblePort = async () => {
  try {
    const portNumber = await portscanner.findAPortNotInUse(25000,35000)
    return String(portNumber)
  } catch (err){
    console.log("Error in Port Scanner", err)
    const portNumber = String(25000)
    return portNumber
  }
}










